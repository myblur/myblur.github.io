<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>失落的旁观者</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iblur.me/"/>
  <updated>2019-05-09T15:15:34.798Z</updated>
  <id>https://iblur.me/</id>
  
  <author>
    <name>iblur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka常见面试题及简要解答（上篇）</title>
    <link href="https://iblur.me//articles/kafka-interview-questions-and-answers-part-one.html"/>
    <id>https://iblur.me//articles/kafka-interview-questions-and-answers-part-one.html</id>
    <published>2019-05-07T14:46:48.000Z</published>
    <updated>2019-05-09T15:15:34.798Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间京东的技术类书各种满多少减多少，小组老司机说这个月的活动经费不吃饭了，买书吧！</p><p>鞥。。。实在是我的书太多了，经典的书基本上都买了，不知道我还能买些什么。。。</p><p>不过有句话说的好：书非借不能读也！我的书基本上在吃灰。</p><p>不过最后还是买了两本：<a href="https://book.douban.com/subject/30418895/" rel="external nofollow noopener noreferrer" target="_blank">《Rust编程之道》</a>、<a href="https://book.douban.com/subject/30437872/" rel="external nofollow noopener noreferrer" target="_blank">《深入理解Kafka核心设计与实践原理》</a>。前者暂时不表，之所以买后者呢，是因为一直也没深入学过Kafka，关注过后者的作者的微信公众号，前段时间推了一篇<a href="https://mp.weixin.qq.com/s/I-YsRKcjcBv4eOop-jjO0A" rel="external nofollow noopener noreferrer" target="_blank">Kafka面试题全套整理 | 划重点要考！</a>，看了里面的题目，感觉一脸懵逼，既然他又写了本书，那就买来看看吧。。。</p><p>啰嗦了这么多，开始正题吧，接下来我将会把文章里面所列出的题目都一一简要作答，以供参考。</p><a id="more"></a><ol><li><p>Kafka的用途有哪些？使用场景如何？</p><blockquote><p><strong>消息系统：</strong>可以当做传统消息中间件，并且提供了大多数消息系统难以实现的消息顺序性保障及回溯消息功能。</p><p><strong>存储系统：</strong>Kafka的消息持久化到硬盘进行存储，并且是多副本存储。我们可以设置数据保留策略为”永久”来作为长期数据存储系统来使用。</p><p><strong>流处理平台：</strong>Kafka提供了一个完整流式处理类库，比如窗口，连接，变换和聚合等操作。</p></blockquote></li><li><p>Kafka中的ISR、AR又代表什么？ISR的伸缩又指什么？</p><blockquote><p><strong>ISR(In-Sync Replicas)：</strong>所有与leader副本保持<strong>一定程度同步</strong>的副本组成ISR，ISR集合是AR集合中的一个子集。</p><p><strong>AR(Assigned Replicas)：</strong>分区中所有副本系统的成为AR。</p><p><strong>ISR的伸缩：</strong>leader副本负责维护与跟踪ISR集合中所有follower副本的滞后程度，当follower副本落后太多或者失效是，leader副本会将他从ISR集合中剔除并加入OSR中，如果OSR集合中有follower副本”追上”了leader副本，那么leader副本会把它从OSR集合中转移到ISR集合。</p><p><strong>一定程度同步：</strong>Kafka消息生产者发送的消息首先会先发送到leader副本，然后follower副本才能从leader副本中拉取消息进行同步，同步期间follower副本相对于leader副本会有一定程度的之后，而这个滞后返回可以通过参数配置。而滞后超过这个配置的则组成OSR(Out-of-Sync Replicas)</p></blockquote></li><li><p>Kafka中的HW、LEO、LSO、LW等分别代表什么？</p><blockquote><p><strong>HW(High Watermark)：</strong>俗称高水位，它标识一个特定的消息偏移量（offset），消费者只能拉取到这个offset之前的消息。</p><p><strong>LEO(Log End Offset)：</strong>它标识当前日志文件中下一条代写入消息的offset，相当于当前日志分区中最后一条消息的offset+1，分区ISR集合中每个副本都会维护自身的LEO，而ISR集合中最小的LEO及为分区的HW，而消费者也只能消费HW之前的消息。</p></blockquote></li><li><p>Kafka中是怎么体现消息顺序性的？</p><blockquote><p>Kafka的消息有序通过offset提现，offset是消息在分区中的唯一标识，Kafka通过offset保证消息在分区内的有序性，但是offset不能跨越分区，所以Kafka的消息有序性只体现在分区有序而不是主题有序。</p></blockquote></li><li><p>Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</p><blockquote><p><strong>分区器：</strong>计算消息即将发送到的分区号，Kafka提供了默认的分区器，分区规则：如果消息的key不为null，那么对key进行hash（使用MurmurHash2算法，具备高性能及低碰撞率），根据最终得到的hash值来计算分区号；若key为null，那么消息将会Yui轮询的方式发送到主题内的各个可用分区。</p><p><strong>序列化器：</strong>生产者需要序列化器将对象序列化字节数组才能通过网络发送给Kafka，而消费者需要反序列化器把从Kafka中接收到的字节数组转换成对应的对象。</p><p><strong>处理顺序：</strong>拦截器-&gt;序列化器-&gt;分区器。</p></blockquote></li><li><p>Kafka生产者客户端的整体结构是什么样子的？</p><blockquote><p>Kafka生产者客户端整体架构简要概述：整个生产者客户端由两个线程协调运行，分别为主线程和Sender线程，主线程中油KafkaProducer创建消息，然后通过拦截器-&gt;序列化器-&gt;分区器的处理之后交给消息累加器（RecordAccumulator，也称为消息收集器），Sender线程负责从RecordAccumulator中获取消息并将其发送到Kafka中。</p></blockquote></li><li><p>Kafka生产者客户端中使用了几个线程来处理？分别是什么？</p><blockquote><p>两个线程(其实应该算一个，调用send的那个线程照理来说不属于Kafka客户端)，业务线程调用KafkaProducer.send()方法，发送消息，经过拦截器-&gt;序列化器-&gt;分区器之后，将消息交给RecordAccumulator，Sender线程负责将消息发送到Kafka中。</p></blockquote></li><li><p>Kafka的旧版Scala的消费者客户端的设计有什么缺陷？</p><blockquote><p><strong>工作状态不明确：</strong>旧版消费者基于Zookeeper的Watcher来实现功能，每个消费者对相关的路径进行监听，当触发再均衡操作时，一个消费者组下的所有消费者会同时进行在均衡操作，而消费者之间并不知道彼此操作的结果，可能会导致Kafka工作在一个不正确的状态。</p><p><strong>过度依赖Zookeeper集群：</strong></p><ol><li>羊群效应：Zookeeper中一个被监听的节点变化，大量的Watcher事件通知被发送到客户端，导致在通知期间的其他操作延迟，也可能发生死锁问题。</li><li>脑裂问题：消费者再均衡操作时，每个消费者都与Zookeeper进行通信以判断消费者或Broker变化的情况，由于Zookeeper本身的特性，可能导致同一时刻的消费者获取的状态不一致。</li></ol></blockquote></li><li><p>“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？如果不正确，那么有没有什么hack的手段？</p><blockquote><p>不正确。</p><p>自定义分区分配策略使一个分区可以分配给多个消费者消费（具体实现可以单独写一篇文章，这里就不再进行详细的叙述了）。</p></blockquote></li><li><p>消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1?</p><blockquote><p>当前消费者需要提交的offset并不是offset，而是offset+1，它标识下一条需要拉取消息的位置</p></blockquote></li><li><p>有哪些情形会造成重复消费？</p><blockquote><p>一次拉取多条消息，消息全部处理完成再进行位移提交。若消费者在处理了部分消息之后异常宕机，则此时没有进行位移提交，故障恢复后消费者再次拉取的消息还是从宕机前最后一次提交的offset开始。此为重复消费消息。</p></blockquote></li><li><p>那些情景下会造成消息漏消费？</p><blockquote><p>一次拉取多条消息，拉取消息之后马上进行了位移提交。消费者在处理了部分消息之后异常宕机，故障恢复之后拉取到的是已经位移提交之后的值，未处理的消息则被漏消费（漏处理）。</p></blockquote></li><li><p>KafkaConsumer是非线程安全的，那么怎么样实现多线程消费？</p><blockquote><p>如何实现多线程消费：</p><ol><li>每一个消费线程单独持有一个KafkaConsumer对象，但是此方法线程数受限于分区的实际个数。</li><li>多个线程消费同一个分区，实现复杂，不推荐。</li><li>单线程接收消息，多线程处理消息，但此方法会导致消息无法顺序处理，手动位移提交需要特别设计。</li></ol><p>KafkaConsumer定义了一个acquire方法，用来检查当前是否只有一个线程在操作，若有其他线程正在操作此KafkaConsumer，则会抛出ConcurrentModifcationException异常，其实现方式也异常简单，节选代码如下：</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// currentThread holds the threadId of the current thread accessing KafkaConsumer</span></span><br><span class="line"><span class="hljs-comment">// and is used to prevent multi-threaded access</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> NO_CURRENT_THREAD = -<span class="hljs-number">1L</span>;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicLong currentThread = <span class="hljs-keyword">new</span> AtomicLong(NO_CURRENT_THREAD);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * 获取一个轻量级锁用来保证消费者在多线程下是线程安全的，如果锁已经被其他线程持有了则抛出 ConcurrentModificationException。</span></span><br><span class="line"><span class="hljs-comment"> * 而这个锁的获取也挺简单，currentThread默认值为NO_CURRENT_THREAD，通过cas设置当前线程的值，若设置失败，则代表有其他线程已经在操作此KafkaConsumer，则抛出异常。</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">long</span> threadId = Thread.currentThread().getId();</span><br><span class="line">  <span class="hljs-keyword">if</span> (threadId != currentThread.get() &amp;&amp; !currentThread.compareAndSet(NO_CURRENT_THREAD, threadId)) &#123;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException(<span class="hljs-string">"KafkaConsumer is not safe for multi-threaded access"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-comment">// 此处代表这个锁也是可重入的。</span></span><br><span class="line">  refcount.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 示范锁，当refcount减至0，则代表当前线程不再持有此KafkaConsumer</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (refcount.decrementAndGet() == <span class="hljs-number">0</span>)</span><br><span class="line">    currentThread.set(NO_CURRENT_THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简述消费者与消费组之间的关系。</p><blockquote><p>若所有的消费者都属于同一个消费组，那么所有的消息都会被均衡的投递给每一个消费者，即每条消息知会被一个消费者处理，这就相当于“点对点”模式的应用</p><p>若所有的消费者都隶属于不同的消费组，那么所有的消息都会被广播给所有的消费者，即每条消息都会被所有的消费者处理，这就相当于“发布/订阅”模式的应用                                                                                                                            </p></blockquote></li><li><p>当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？</p><blockquote><ol><li><p>创建topic：Kafka在log.dir或者log.dirs参数所配置的目录下创建相应的主题分区，在zookeeper中创建/brokers/topics/{topic-name}、/config/topics/{topic-name}节点。</p></li><li><p>删除topic：删除Zookeeper中/config/topics/{topic-name}节点、删除/brokers/topics/{topic-name}几点及其子节点，删除Kafka集群中在log.dir或者log.dirs参数所配置的目录下所有与主题{topic-name}相关的文件。</p></li></ol></blockquote></li><li><p>topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</p><blockquote><p>分区数可以增加。</p><p>通过topic-config.sh脚本中的alter命令进行分区增加操作。</p></blockquote></li><li><p>topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</p><blockquote><p>不支持分区数减少。</p><p>删除分区会引起一系列问题，比如消息的顺序性、事务性、以及分区和副本的状态机切换问题。</p></blockquote></li><li><p>创建topic时如何选择合适的分区数？</p><blockquote><p>分区数的选择视具体情况而定。</p><p>增加合适的分区数可以在一定程度上提升整体的吞吐量，但超过对应的阈值之后吞吐量不升反降，建议在生成环境中做一个完备的测试找到合适分区数与阈值。</p></blockquote></li><li><p>Kafka目前有那些内部topic，它们都有什么特征？各自的作用又是什么？</p><blockquote><p>截止至Kafka 2.0.0版本，Kafka内部保护两个主题：__consumer_offsets、__transaction_state</p><p>__consumer_offsets用于存放存放消费者偏移量，__transcation_state用于持久化事务状态信息。</p></blockquote></li><li><p>优先副本是什么？它有什么特殊的作用？</p><blockquote><p>优先副本是指在AR集合列表中第一个副本。</p><p>理想情况下，优先副本就是该分区的leader副本，Kafka会确保所有的主题的优先副本在集群中均匀分布</p></blockquote></li><li><p>Kafka有哪几处地方有分区分配的概念？简述大致的过程及原理。</p><blockquote><p>这题不太明白具体意思，到底是说Kafka的创建主题之后的brokers的分区分配，还是分区重分配的分区分配，还是消费者的分区分配。。。</p><p>暂且放这里。。。</p></blockquote></li><li><p>简述Kafka的日志目录结构。</p><blockquote><p>大致目录结构如下</p><p>此处应当有图</p><p>/{kafka-logs}/{topic-name}-{partition}/{index,log,timeindex}</p></blockquote></li><li><p>Kafka中有那些索引文件？</p><blockquote><p>有偏移量所有文件*.index和时间索引文件*.timeindex。</p></blockquote></li><li><p>如果我指定了一个offset，Kafka怎么查找到对应的消息？</p><blockquote><p>Kafka中的索引文件是稀疏索引，并不保证每个消息在索引文件中都有对应的索引项，offset索引文件是单调递增的，查询指定offset时，使用二分查找法来快速定位offset的位置，如果指定的offset不在索引文件中，则会返回喜爱与指定offset的最大offset。</p></blockquote></li><li><p>如果我指定了一个timestamp，Kafka怎么查找到对应的消息？</p><blockquote><p>timestamp的索引文件也保持严格的单调递增，同样使用二分查找法找到此timestamp对应的offset，再根据此offset去查找offset的索引文件再次定位。</p></blockquote></li><li><p>聊一聊你对Kafka的Log Retention的理解。</p><blockquote><p>按照一定的保留策略直接删除不符合条件的日志分段。</p><p>主要分为下面三种策略：</p><ol><li>基于时间：日志删除任务会检查当前日志文件中是否有<strong>保留时间</strong>超过设定阈值的日志分段文件集合。阈值可以通过broker端参数<code>log.retention.hours</code>、<code>log.retention.minutes</code>和<code>log.retention.ms</code>来配置，优先级依次提高。默认情况只配置了<code>log.retention.hours</code>参数，其值为168，即日志分段文件的默认保留时间为7天。</li><li>基于日志大小：日志删除任务会检查当前日志文件中是否有<strong>文件大小</strong>超过设定阈值的日志分段文件集合。阈值可以通过broker端参数<code>log.retention.bytes</code>（此配置是Log中所有的日志文件的总大小）来配置，默认值为-1，表示无穷大；单个日志分段大小的配置为<code>log.segment.bytes</code>来限制，默认值为1073741824，即为1GB</li><li>基于日志起始偏移量：基于日志起始偏移量的保留策略的判断依据是某日志分段的下一个日志分段的起始偏移量<code>baseOffset</code>是否小于<code>logStartOffset</code>，若是则可以删除此日志分段。</li></ol></blockquote></li><li><p>聊一聊你对Kafka的Log Compaction的理解</p><blockquote><p>针对每个消息的key进行整合，对于有相同的key，不同value值，只保留最后一个版本，下图为官方示意图（也可以新开一章详细叙述）</p><p><img src="http://kafka.apache.org/22/images/log_compaction.png" alt="Kafka Log Compaction示意图/侵删"></p></blockquote></li></ol><p>以上是部分面试题的简要解答，若有疏漏与错误之处还请谅解与指出，不胜感激。</p><p>下篇再见。。。</p>]]></content>
    
    <summary type="html">
    
      面试中经常问及的Kafka知识点，涉及到Kafa的生产者，消费者，主题与分区，日志存储等问题，并对其中的常见问题进行了简单的叙述与解答。
    
    </summary>
    
      <category term="知识总结" scheme="https://iblur.me/categories/knowledge-repository/"/>
    
    
      <category term="Kafka" scheme="https://iblur.me/tags/Kafka/"/>
    
      <category term="面试" scheme="https://iblur.me/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>全新的开始</title>
    <link href="https://iblur.me//articles/brand-new-start.html"/>
    <id>https://iblur.me//articles/brand-new-start.html</id>
    <published>2019-04-21T13:31:10.000Z</published>
    <updated>2019-05-06T16:17:58.817Z</updated>
    
    <content type="html"><![CDATA[<p>距离上一次折腾博客差不多有五年了吧。</p><p>当时发现原来还有静态博客这么好的东西，连夜搭建环境开搞。</p><p>第一篇文章就是将自己在Windows机器上用Octpress搭建静态博客并使用Github Pages部署的过程及所踩过的坑记录了下来，我的第一个域名<code>iblur.me</code>也是在那时候申请的。。。</p><p>然后，好像就没有然后了吧。。。</p><p>然后，突然发现没什么可值得写的了。。。<br><a id="more"></a></p><p>再后来觉得用Java写个博客程序也行，决定要秀一波，然后花了半个月用Java写了个博客程序，配上一个自己凑出来的UI，放在了现在已经下线的百度的BAE上面，然后又去做了备案，这一放就是三四年，每月12块，也挺好！</p><p>这个博客也七七八八也写了一些现在看来”误人子弟”，”啼笑皆非”的文章，闲来无事读下来真是老脸都没处搁，幸好当年除了我自己也没人看。</p><p>当然咯，每年我还一定在12月31号那天上去写一篇当年的年终总结，顺便给自己定一些基本上来年实现不了的目标，周而复始。。。</p><p>就这样写了估计有三年吧。。。</p><p>这个博客程序当年一上线就说要做第二版，因为不fashion。。。</p><p>然后还拟定了如下需求：</p><ol><li>前后台UI必须换，哪怕抄一个来。</li><li>上监控预警，监控CPU，Memory，GC，Thread，用图表动态展示，用邮件实时预警。</li><li>上统计分析，统计PV，浏览器类型，操作系统类型，地域分布。</li><li>根据阅读量统计标签热度，搞出类似标签云的东西来。</li><li>换Cache，EhCache还要占本机内存？BAE的Redis有限制性的免费用？必须上Redis。</li><li>搞前后端分离，template能装逼？必须用上高大上的React、AngularJS（那时Vue.js还不火）。</li><li>搜索怎能用数据库的like呢？必须用Lucene做全文搜索。</li><li>。。。</li></ol><p>然后，这个v2.0就这么一拖也拖了三年。。。</p><p>那么我为什么现在突然又要弄博客了呢？</p><p>我能说我买了两个域名一直没用，就勉强认为就是这个原因吧。。。</p><p>重新弄这个博客，也不打算自己再用Java重写了，毕竟前端是我的硬伤，就用Hexo弄个静态博客，先用Github Pages部署，至于要不要弄个单独的服务器部署再说吧！</p><p>那博客要写什么了？其实我暂时也不太清楚，应该会包括学习心得、工作总结、读书笔记、个人生活、个人吐槽等等。。。</p><p>我的文笔非常不好，写起东西来口水话特别多，就通过这个博客来慢慢锻炼吧。。。</p><p>暂时就到这里吧。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上一次折腾博客差不多有五年了吧。&lt;/p&gt;
&lt;p&gt;当时发现原来还有静态博客这么好的东西，连夜搭建环境开搞。&lt;/p&gt;
&lt;p&gt;第一篇文章就是将自己在Windows机器上用Octpress搭建静态博客并使用Github Pages部署的过程及所踩过的坑记录了下来，我的第一个域名&lt;code&gt;iblur.me&lt;/code&gt;也是在那时候申请的。。。&lt;/p&gt;
&lt;p&gt;然后，好像就没有然后了吧。。。&lt;/p&gt;
&lt;p&gt;然后，突然发现没什么可值得写的了。。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="想法" scheme="https://iblur.me/categories/thoughts/"/>
    
    
      <category term="琐碎" scheme="https://iblur.me/tags/trivial/"/>
    
  </entry>
  
</feed>
